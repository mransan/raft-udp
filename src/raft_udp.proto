option (int32_type) = int_t;

import "raft.proto";

package raft.udp;

message configuration {
  required raft.Configuration     raft_configuration = 1; 
  repeated ServerUdpConfiguration servers_udp_configuration = 2;
    // Note that there is an invariant that this  [servers_udp_configuration] 
    // field should the length of the [nb_of_server] field in the 
    // raft configuration.

  required double compaction_period = 3; 
  required string log_record_directory = 4;
  required string compaction_directory = 5;
}

message ServerUdpConfiguration {
  required int32  raft_id       = 1;
    // This is the logical raft identifier for that server. [0 - nb_of_server[.
  required string inet4_address = 2; 
    // IPv4 Internet Address: aaa.bbb.ccc.ddd
  required int32  raft_port     = 3; 
    // Port number. 
  required int32  client_port   = 4; 
    // Port number. 
}

message LogEntry {
    required string request_id = 1; 
    required bytes  data       = 2;
}

message ClientRequest {
  oneof t {
    LogEntry add_log = 1;
  }
}

message ClientResponse {

  message AddLogSuccess {}
  message AddLogReplicationFailure {}
  message AddLogNotALeader {
    optional int32 leader_id = 1;
  }

  oneof t {
    AddLogSuccess            add_log_success             = 1;
    AddLogReplicationFailure add_log_replication_failure = 2;
    AddLogNotALeader         add_log_not_a_leader        = 3;
  }
}

message AppRequest {
  oneof t {
    LogEntry validate_log = 1; 
    LogEntry commit_log = 2; 
  }
}

message AppResponse {
  message Success {}
  message Failure {
    required string error_message = 1; 
    required int32  error_code    = 2;
  }
  oneof t {
    Success success = 1; 
    Failure failure = 2; 
  }
}
